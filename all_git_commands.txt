This is version 1 of my project.
I want this to go into commit 2.


git init --> for initialising as .git

git status --> for status checking of modified files and files whcih are in staging area.
The git status command will show you the different states of files in your working directory and staging area. Which files are modified and unstaged and which are staged but not yet committed. In it’s normal form, it also will show you some basic hints on how to move files between these stages.

git add <file_name>  or  git add --a  
The git add command adds content from the working directory into the staging area (or “index”) for the next commit.

git commit -m "your message goes here"
When the git commit command is run, by default it only looks at this staging area, so git add is used to craft what exactly you would like your next commit snapshot to look like.
The git commit command takes all the file contents that have been staged with git add and records a new permanant snapshot in the database and then moves the branch pointer on the current branch up to it.

git log --> details of all commit
The git log command is used to show the reachable recorded history of a project from the most recent commit snapshot backwards. By default it will only show the history of the branch you’re currently on, but can be given different or even multiple heads or branches from which to traverse. It is also often used to show differences between two or more branches at the commit level.
git lop -p
This will show what changes has been made in file that is what is added and what is removed with commit.
git log -p -<number>
This will show <number> commits along with diff.
git log --stat
A short summary of commits.
git log --pretty=oneline
This will show every commit in one line
git log --pretty=short
This will show every commit in short
git log --pretty=full
This will show every author, committer and message
git log --since=2.days (n.weeks or n.months or n.years)
This will show commit of last 2 days
git log --pretty=format:"%h -- %an"
This will show commits in the given format 
So formats in the documentation page
%h --> abbreviated commit hash
%an --> author name
git commit --amend
This is will allow us to change in last commit that we can change the message and all in editor.

git rm --> for removing files
The git rm command is used to remove files from the staging area and working directory for Git. It is similar to git add in that it stages a removal of a file for the next commit.

git rm -rf --> will remove the contents of the particular folder
remove folder recursively (rm -r remove file recursively)
after doing fit rm -rf .git then if you will check for git status then again that fatal error because we removed the whole by .git means now that will become simple repository not git repository.

git clone url (name whatever you want to give it --> also leave it blank)
Clone a repository into a new directory

.DS_store --> First off — what is this .DS_Store file?
It stands for Desktop Services Store and it holds meta information about your folder’s thumbnails, settings, etc.
.DS_Store files are created any time you navigate to a file or folder from the Finder on a Mac.

.gitignore file and when you add the file names into this file and when you will make changes inside the added files then git will ignore that file.
If you will do *.extension then it will ignore all files with that extension.
Git will ignore the blank folder

git diff --> this will compare staging area with working directory

git diff --staged --> this will compare our last commit with current staging area 

git commit -a -m "message goes here" -->
This will stage and commit directly all tracked files only

when we rename the file in finder it will be considered as deleted old file and the renamed file is now untracked
and when you add that file then it will show that you renamed the file

git rm <file_name>
this will remove the file and changes added to stage
But if we manually delete the file then we have to manually add to stage 

git mv <old_file_name> <new_file_name>
it will rename the file and add to stage
But if we do it manually then we have to stage that

git rm --cached <file_name>
It will start untracking that file
Now when you add already tracked file in .gitignore and you do some changes in that file then also that change will be reflected so we have to run the above mentioned command and add to .gitignore too.

git restore --staged <file_name>
This will unstage the file

git checkout -- <filename> 
This will unmodify the last modification but not if it is staged or committed
git checkout -f
This will unmodify the last modification of all files but not if it is staged or committed

git remote add origin https://github.com/Mantraraj8472/GitTutorials.git
Now this remote repository is named as origin and added
Also learn about SSH keys

alias is used to write commands easier
git config --global alias.st status
means st is short form of status

Difference between git clone and git remote:
git clone:

Will physically download the files into your computer. It will take space from your computer. If the repo is 200Mb, then it will download that all and place it in the directory you cloned.

git remote add:

Won't take space! It's more like a pointer! It doesn't increase your disk consumption. It just gets a snapshot of what branches are available and their git commit history I believe. It doesn't contain the actual file/folders of your project.

If you do:

git remote add TechLeadRepo  git://github.com/user/test.git
then you haven't added anything to your computer. After you've added it in your remote branches then you're able to get a list of all branches on that remote by doing:

git fetch --all
upon fetching (or pulling), you download the files And then if you wanted to do get your colleague's feature22 branch into your local, you'd just do

git checkout -b myLocalFeature22 TechLeadRepo/feature22
Had you cloned his repo then you would have to go into that local repository's directory and simply just checkout to your desired branch

git checkout -b <branch_name>
This will create a new branch and direct you to that newly created brach

git branch
This will list out all the brances and the one which has * in it's prefix is the branch in which we are currently in.

git checkout <branch_name>
This will switch to the specified branch

Highly recommend that before merging do commit and be in clean state in the branches.

Now what are merge conflicts?
A merge conflict is an event that occurs when Git is unable to automatically resolve differences in code between two commits.
It occurs when you changes the same piece of instruction and other also changes the same and try to merge with him then git doesn't resolve it automatically.
we have to resolve it (example we can do git add <file_name> so it will take as that you have resolved).
Conflicts generally arise when two people have changed the same lines in a file, or if one developer deleted a file while another developer was modifying it. 
In these cases, Git cannot automatically determine what is correct. ... Git will mark the file as being conflicted and halt the merging process.

Now before when you create branch then whole folder copies but currently only changes will stored and rest are pointer to the previous one which saves the space

git branch -v
list the last commit of all branches having hash and message
git branch --merged 
Tell about branches that are already merged.
git branch --no-merged
Tell about branches that are remaining for merged.
git branch -d <branch_name>
delete the brach and gives error if not merged.
git branch -D <branch_name>
delete the branch without getting any error even if it is not merged.

git stash 
This will create a stack like data structure and delete the changes
git stash pop 
This will bring back the deleted code which was deleted by git stash.

git cherry-pick <id_of_the_commit>
By doing this we can add that commit to the current working head or branch.

This is changed in main branch.